{"version":3,"sources":["components/weather_stuff/WeatherCard.js","components/weather_stuff/WeatherGraph.js","components/weather_stuff/WeatherDetails.js","components/weather_stuff/WeatherForecast.js","components/cov19_stuff/CovidValue.js","components/cov19_stuff/CovidStatCard.js","components/InfoCard.js","styles/styles.js","components/Info.js","App.js","index.js"],"names":["WeatherCard","props","classes","info","date","weather","maxT","Math","round","max","apply","map","item","main","temp_max","minT","floor","min","temp_min","icon","array","length","modeMap","maxEl","maxCount","i","el","mode","MenuItem","style","padding","onClick","selectFunc","id","selected","Box","className","weatherCard","CardHeader","title","grayText","dayjs","format","titleTypographyProps","variant","textAlign","display","justifyContent","alt","weatherIcon","src","slice","CardContent","Grid","container","spacing","justify","Typography","WeatherGraph","data","index","order","temp","feels_like","margin","xMax","yMax","x","d","y","xScale","scaleTime","range","domain","extent","yScale","scaleLinear","chart","width","height","Group","top","left","LinePath","strokeWidth","stroke","strokeLinecap","fill","curve","curveMonotoneX","AreaClosed","WeatherDetails","timeText","day","time","humidity","wind","curTemp","weatherGraph","timeLabels","toString","speed","unshift","pop","key","xs","direction","addr","paddingTop","weatherIconBig","fontSize","alignItems","grayCenterText","WeatherForecast","useState","setAddr","forecast","setForecast","selectedDay","setSelectedDay","getWeatherAndLocation","a","position","name","fetch","lat","lon","process","api_call","json","useEffect","selectDay","useCallback","num","today","Date","dayCards","list","newDate","getTime","push","dayCardComponents","dayCard","numberWithSpaces","replace","CovidValue","value","velocity","undefined","alignSelf","size","label","color","CovidStatCard","stats","setStats","getCovidCityStats","area","location","confirmed","velocity_confirmed","dead","velocity_dead","recovered","velocity_recovered","updated","InfoCard","Card","infoCardStyle","Divider","useStyles","makeStyles","theme","infoCardWrapper","maxWidth","forecastStyle","Info","styles","infoCards","city","App","Fragment","backgroundColor","AppBar","Container","marginTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b1f3d53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport dayjs from \"dayjs\";\r\n// MUI\r\nimport Box from \"@material-ui/core/Box\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nfunction mode(array) {\r\n  if (array.length === 0) return null;\r\n  var modeMap = {};\r\n  var maxEl = array[0],\r\n    maxCount = 1;\r\n  for (var i = 0; i < array.length; i++) {\r\n    var el = array[i];\r\n    if (modeMap[el] == null) modeMap[el] = 1;\r\n    else modeMap[el]++;\r\n    if (modeMap[el] > maxCount) {\r\n      maxEl = el;\r\n      maxCount = modeMap[el];\r\n    }\r\n  }\r\n  return maxEl;\r\n}\r\n\r\nexport default function WeatherCard(props) {\r\n  const classes = props.classes;\r\n  const { date, weather } = props.info;\r\n\r\n  const maxT = Math.round(\r\n    Math.max.apply(\r\n      Math,\r\n      weather.map((item) => item.main.temp_max)\r\n    ) - 273.15\r\n  );\r\n  const minT = Math.floor(\r\n    Math.min.apply(\r\n      Math,\r\n      weather.map((item) => item.main.temp_min)\r\n    ) - 273.15\r\n  );\r\n  const icon = mode(weather.map((item) => item.weather[0].icon));\r\n\r\n  return (\r\n    <MenuItem\r\n      style={{ padding: \"0\" }}\r\n      onClick={() => props.selectFunc(props.id)}\r\n      selected={props.selected === props.id}\r\n    >\r\n      <Box className={classes.weatherCard}>\r\n        <CardHeader\r\n          classes={{\r\n            title: classes.grayText,\r\n          }}\r\n          title={dayjs(date).format(\"ddd\")}\r\n          titleTypographyProps={{ variant: \"body2\" }}\r\n          style={{ textAlign: \"center\" }}\r\n        />\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <img\r\n            alt=\"404\"\r\n            className={classes.weatherIcon}\r\n            src={`http://openweathermap.org/img/wn/${icon.slice(0, 2)}d@2x.png`}\r\n          />\r\n        </div>\r\n        <CardContent>\r\n          <Grid container spacing={2} justify=\"center\">\r\n            <Grid item>\r\n              <Typography variant=\"body2\">{maxT}°</Typography>\r\n            </Grid>\r\n            <Grid item className={classes.grayText}>\r\n              <Typography variant=\"body2\">{minT}°</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Box>\r\n    </MenuItem>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// vx\r\nimport { Group } from \"@vx/group\";\r\nimport { scaleTime, scaleLinear } from \"@vx/scale\";\r\nimport { extent, max } from \"d3-array\";\r\nimport { LinePath, AreaClosed } from \"@vx/shape\";\r\nimport { curveMonotoneX } from \"@vx/curve\";\r\n\r\nexport default function WeatherGraph(props) {\r\n  const data = props.info.weather.map((item, index) => ({\r\n    order: index,\r\n    temp: Math.round(item.main.feels_like - 273.15),\r\n  }));\r\n\r\n  const width = 560;\r\n  const height = 80;\r\n\r\n  const margin = {\r\n    top: 30,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n  };\r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n\r\n  const x = (d) =>\r\n    d.order;\r\n\r\n  const y = (d) =>\r\n    d.temp -\r\n    (Math.min.apply(\r\n      null,\r\n      data.map((item) => item.temp)\r\n    ) -\r\n      2);\r\n\r\n  const xScale = scaleTime({\r\n    range: [0, xMax],\r\n    domain: extent(data, x),\r\n  });\r\n\r\n  const yScale = scaleLinear({\r\n    range: [yMax, 0],\r\n    domain: [0, max(data, y)],\r\n  });\r\n\r\n  const chart = (\r\n    <svg width={width} height={height}>\r\n      <Group top={margin.top} left={margin.left} justify=\"flex-end\">\r\n        <LinePath\r\n          data={data}\r\n          x={(d) => xScale(x(d))}\r\n          y={(d) => yScale(y(d))}\r\n          strokeWidth={4}\r\n          stroke={\"#EC6E4C\"}\r\n          strokeLinecap=\"round\"\r\n          fill={\"transparent\"}\r\n          curve={curveMonotoneX}\r\n        />\r\n        <AreaClosed\r\n          data={data}\r\n          yScale={yScale}\r\n          x={(d) => xScale(x(d))}\r\n          y={(d) => yScale(y(d))}\r\n          strokeWidth={0}\r\n          fill={\"#EAA18F\"}\r\n          curve={curveMonotoneX}\r\n        />\r\n      </Group>\r\n    </svg>\r\n  );\r\n\r\n  return <div>{chart}</div>;\r\n}\r\n","import React from \"react\";\r\nimport dayjs from \"dayjs\";\r\n// MUI\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// Custom components\r\nimport WeatherGraph from \"./WeatherGraph\";\r\n\r\nexport default function WeatherDetails(props) {\r\n  let date = {\r\n    day: \"???\",\r\n    time: \"???\",\r\n  };\r\n\r\n  let timeText;\r\n\r\n  const classes = props.classes;\r\n  let icon;\r\n\r\n  let humidity = \"???\";\r\n  let wind = \"???\";\r\n  let weather = \"???\";\r\n  let curTemp = \"?\";\r\n  let weatherGraph = \"\";\r\n\r\n  let timeLabels = [\"9 AM\", \"12 PM\", \"3 PM\", \"6 PM\", \"9 PM\", \"12 AM\", \"3 AM\"];\r\n\r\n  if (typeof props.info != \"undefined\") {\r\n    date.day = dayjs(props.info.date).format(\"dddd\");\r\n    date.time = Math.floor(dayjs(props.info.date).format(\"H\") / 3) * 3;\r\n\r\n    timeText =\r\n      (date.time % 12).toString() + \":00 \" + (date.time < 12 ? \"AM\" : \"PM\");\r\n\r\n    curTemp = Math.round(\r\n      props.info.weather.map((item) => item.main.temp)[0] - 273.15\r\n    );\r\n    weather = icon = props.info.weather.map((item) => item.weather[0].main)[0];\r\n    icon = props.info.weather.map((item) => item.weather[0].icon)[0];\r\n    humidity = props.info.weather.map((item) => item.main.humidity)[0];\r\n    wind = props.info.weather.map((item) => item.wind.speed)[0];\r\n    weatherGraph = <WeatherGraph info={props.info} />;\r\n\r\n    while (\r\n      timeLabels[0] !==\r\n        (date.time % 12).toString() + \" \" + (date.time < 12 ? \"AM\" : \"PM\") &&\r\n      !(\r\n        (date.time % 12).toString() + \" \" + (date.time < 12 ? \"AM\" : \"PM\") ===\r\n          \"0 PM\" && timeLabels[0] === \"12 PM\"\r\n      )\r\n    ) {\r\n      timeLabels.unshift(timeLabels.pop());\r\n    }\r\n  } else {\r\n    icon = \"none\";\r\n  }\r\n\r\n  timeLabels = timeLabels.map((time, index) => (\r\n    <Grid key={index} xs item>\r\n      <Typography key={index} variant=\"body2\">\r\n        {time}\r\n      </Typography>\r\n    </Grid>\r\n  ));\r\n\r\n  return (\r\n    <Grid container direction=\"column\" spacing={2}>\r\n      <Grid item container direction=\"column\">\r\n        <Grid item>\r\n          <Typography variant=\"h5\">{props.addr}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"body2\">\r\n            {date.day} {timeText}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"body2\">{weather}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item container direction=\"row\">\r\n        <Grid\r\n          item\r\n          container\r\n          justify=\"flex-start\"\r\n          direction=\"row\"\r\n          spacing={1}\r\n          xs={6}\r\n        >\r\n          <Grid item style={{ paddingTop: \"8pt\" }}>\r\n            <img\r\n              alt=\"?\"\r\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n              className={classes.weatherIconBig}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h3\" style={{ fontSize: \"50pt\" }}>\r\n              {curTemp}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item style={{ paddingTop: \"11pt\" }}>\r\n            <Typography>°C</Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          spacing={2}\r\n          xs={6}\r\n        >\r\n          <Grid item container direction=\"column\">\r\n            <Grid item>\r\n              <Typography variant=\"body2\">Humidity: {humidity}%</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body2\">Wind: {wind} m/s</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container item direction=\"column\" alignItems=\"center\">\r\n        <Grid item>{weatherGraph}</Grid>\r\n\r\n        <Grid className={classes.grayCenterText} container item direction=\"row\">\r\n          {timeLabels}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\n// Custom components\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\n// MUI\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nexport default function WeatherForecast(props) {\r\n  const [addr, setAddr] = useState(\"\");\r\n  const [forecast, setForecast] = useState(\"\");\r\n\r\n  const [selectedDay, setSelectedDay] = useState(0);\r\n\r\n  const getWeatherAndLocation = async () => {\r\n    setAddr(props.position.name);\r\n\r\n    const api_call = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${props.position.lat}&lon=${props.position.lon}&appid=${process.env.REACT_APP_OPEN_WEATHER_API_KEY}`\r\n    );\r\n    const data = await api_call.json();\r\n    setForecast(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherAndLocation();\r\n  }, []);\r\n\r\n  const selectDay = useCallback((num) => {\r\n    setSelectedDay(num);\r\n  }, []);\r\n\r\n  const today = new Date();\r\n\r\n  let dayCards = [];\r\n\r\n  if (forecast !== \"\") {\r\n    if (forecast.list.length > 0) {\r\n      for (let i = 0; i < 5; i++) {\r\n        const newDate = new Date(today.getTime() + i * 86400000);\r\n\r\n        dayCards.push({\r\n          date: newDate,\r\n          weather: forecast.list.slice(i * 8, i * 8 + 7),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  let dayCardComponents = dayCards.map((dayCard, index) => (\r\n    <WeatherCard\r\n      key={index}\r\n      id={index}\r\n      info={dayCard}\r\n      classes={props.classes}\r\n      selectFunc={selectDay}\r\n      selected={selectedDay}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"space-between\"\r\n      direction=\"column\"\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n    >\r\n      <WeatherDetails\r\n        addr={addr}\r\n        info={dayCards[selectedDay]}\r\n        classes={props.classes}\r\n      />\r\n      <Grid item container direction=\"row\" justify=\"center\">\r\n        {dayCardComponents}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nfunction numberWithSpaces(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n}\r\n\r\nexport default function CovidValue(props) {\r\n  let value = 0;\r\n  let velocity = 0;\r\n\r\n  if (props.value !== undefined) {\r\n    value = numberWithSpaces(props.value);\r\n    velocity =\r\n      (props.velocity < 0 ? \"\" : \"+\") + numberWithSpaces(props.velocity);\r\n  }\r\n\r\n  return (\r\n    <Grid item container xs direction=\"column\">\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Typography variant={props.size}>{props.label}</Typography>\r\n      </Grid>\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Typography variant={props.size}>{value}</Typography>\r\n      </Grid>\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Typography variant={props.size} style={{ color: props.color }}>\r\n          {velocity}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport dayjs from \"dayjs\";\r\n// MUI\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// Custom components\r\nimport CovidValue from \"./CovidValue\";\r\n\r\nexport default function CovidStatCard(props) {\r\n  const [stats, setStats] = useState(\"\");\r\n\r\n  const getCovidCityStats = async () => {\r\n    const api_call = await fetch(\r\n      `https://www.trackcorona.live/api/cities/${props.area}`\r\n    );\r\n    const data = await api_call.json();\r\n    setStats(data.data[0]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCovidCityStats();\r\n  });\r\n\r\n  return (\r\n    <Grid container direction=\"column\" spacing={3}>\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Typography variant=\"h3\">{stats.location}</Typography>\r\n      </Grid>\r\n\r\n      <CovidValue\r\n        label=\"Total infected\"\r\n        value={stats.confirmed}\r\n        velocity={stats.velocity_confirmed}\r\n        color=\"#EC6E4C\"\r\n        size=\"h4\"\r\n      />\r\n\r\n      <Grid item container direction=\"row\">\r\n        <CovidValue\r\n          label=\"Deaths\"\r\n          value={stats.dead}\r\n          velocity={stats.velocity_dead}\r\n          color=\"#EC6E4C\"\r\n          size=\"h6\"\r\n        />\r\n\r\n        <CovidValue\r\n          label=\"Current infected\"\r\n          value={stats.confirmed - stats.dead - stats.recovered}\r\n          velocity={\r\n            stats.velocity_confirmed -\r\n            stats.velocity_dead -\r\n            stats.velocity_recovered\r\n          }\r\n          color={\r\n            stats.velocity_confirmed -\r\n              stats.velocity_dead -\r\n              stats.velocity_recovered >\r\n            0\r\n              ? \"#EC6E4C\"\r\n              : \"#40A90D\"\r\n          }\r\n          size=\"h6\"\r\n        />\r\n\r\n        <CovidValue\r\n          label=\"Recoveries\"\r\n          value={stats.recovered}\r\n          velocity={stats.velocity_recovered}\r\n          color=\"#40A90D\"\r\n          size=\"h6\"\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Typography variant=\"h6\">\r\n          Update from: {dayjs(stats.updated).format(\"DD.MM.YYYY\")}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport WeatherForecast from \"./weather_stuff/WeatherForecast\";\r\nimport CovidStatCard from \"./cov19_stuff/CovidStatCard\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nexport default function InfoCard(props) {\r\n  return (\r\n    <Card className={props.classes.infoCardStyle}>\r\n      <Grid container direction=\"column\" spacing={3}>\r\n        <Grid item>\r\n          <CovidStatCard area={props.location.area} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Divider />\r\n        </Grid>\r\n        <Grid item>\r\n          <WeatherForecast classes={props.classes} position={props.location} />\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n}\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    infoCardWrapper: {\r\n      maxWidth: theme.spacing(80),\r\n      width: \"100%\",\r\n      alignSelf: \"center\",\r\n    },\r\n    infoCardStyle: {\r\n      margin: \"auto\",\r\n      padding: theme.spacing(2),\r\n    },\r\n    forecastStyle: {\r\n      margin: \"auto\",\r\n      width: theme.spacing(14) * 5,\r\n      padding: theme.spacing(2),\r\n      spacing: theme.spacing(2),\r\n    },\r\n    weatherCard: {\r\n      width: theme.spacing(14),\r\n      height: theme.spacing(20),\r\n    },\r\n    weatherIcon: {\r\n      height: theme.spacing(6),\r\n      width: theme.spacing(6),\r\n      alignSelf: \"center\",\r\n      justify: \"center\",\r\n    },\r\n    weatherIconBig: {\r\n      height: theme.spacing(8),\r\n      width: theme.spacing(8),\r\n      alignSelf: \"center\",\r\n      justify: \"center\",\r\n    },\r\n    grayCenterText: {\r\n      textAlign: \"center\",\r\n      color: \"#aaaaaa\",\r\n    },\r\n    grayText: {\r\n      color: \"#aaaaaa\",\r\n    },\r\n  }));\r\n\r\n  export default useStyles;\r\n  ","import React from \"react\";\r\n// MUI\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// Custom\r\nimport InfoCard from \"./InfoCard\";\r\n// styles\r\nimport styles from \"../styles/styles\"\r\n\r\n\r\nexport default function Info() {\r\n  const classes = styles();\r\n\r\n  const cities = [\r\n    {\r\n      lat: 62.03,\r\n      lon: 129.73,\r\n      name: \"Yakutsk\",\r\n      area: \"Yakutia\",\r\n    },\r\n    {\r\n      lat: 35.1028,\r\n      lon: 129.0403,\r\n      name: \"Busan\",\r\n      area: \"Busan\",\r\n    },\r\n    {\r\n      lat: 35.8,\r\n      lon: 128.55,\r\n      name: \"Daegu\",\r\n      area: \"Daegu\",\r\n    },\r\n  ];\r\n\r\n  //   const moscow = {\r\n  //     lat: 55.7558,\r\n  //     lon: 37.6173,\r\n  //     name: \"Moscow\",\r\n  //     area: \"Moscow\",\r\n  //   };\r\n\r\n  const infoCards = cities.map((city, index) => (\r\n    <Grid item key={index} className={classes.infoCardWrapper}>\r\n      <InfoCard location={city} classes={classes} />{\" \"}\r\n    </Grid>\r\n  ));\r\n\r\n  return (\r\n    <Grid container direction=\"column\" spacing={2}>\r\n      {infoCards}\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// Material UI\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\n// Custom components\r\nimport Info from \"./components/Info\";\r\n\r\nexport default function App() {\r\n  return <React.Fragment>\r\n    <div style={{backgroundColor: \"#fafafa\"}}>\r\n    <AppBar style={{margin: 'auto', height: 80, backgroundColor: '#EC6E4C', justifyContent: \"center\", alignItems: \"center\"}}>\r\n        <Typography variant=\"h4\">\r\n          InfoCards\r\n        </Typography>\r\n    </AppBar>\r\n    <Container style={{marginTop: 80, padding: 25}}>\r\n    <Info/>\r\n    </Container>\r\n    </div>\r\n    </React.Fragment>;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"typeface-roboto\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}